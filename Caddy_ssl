#!/bin/bash

# Caddy SSL 一键配置脚本 v4.0
# 智能检测，自动安装，快速配置

set -e

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

# 配置文件路径
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SCRIPT_NAME="caddy-ssl"
INSTALL_PATH="$HOME/$SCRIPT_NAME"

# 打印函数
print_info() { echo -e "${BLUE}[信息]${NC} $1"; }
print_success() { echo -e "${GREEN}[成功]${NC} $1"; }
print_warning() { echo -e "${YELLOW}[警告]${NC} $1"; }
print_error() { echo -e "${RED}[错误]${NC} $1"; }
print_title() { echo -e "${CYAN}$1${NC}"; }

# 检查 root 权限
check_root() {
    if [ "$EUID" -ne 0 ]; then 
        print_error "需要 root 权限"
        exec sudo bash "$0" "$@"
        exit 1
    fi
}

# 检测端口占用
check_port() {
    ss -tulnp 2>/dev/null | grep -q ":$1 " && return 1 || return 0
}

# 快速处理端口冲突
handle_port_conflict() {
    local port=$1
    local name=$2
    
    if check_port $port; then
        return 0
    fi
    
    print_warning "端口 $port ($name) 已被占用"
    
    local pid=$(ss -tulnp 2>/dev/null | grep ":$port " | grep -oP 'pid=\K\d+' | head -n 1)
    local process=$(ps -p $pid -o comm= 2>/dev/null || echo "unknown")
    
    echo "占用进程: $process (PID: $pid)"
    echo ""
    echo "1) 停止占用服务"
    echo "2) 使用备用端口 (81/8443)"
    echo "3) 退出"
    echo ""
    echo -n "选择 [1-3]: "
    read choice
    
    case $choice in
        1)
            kill -9 $pid 2>/dev/null || true
            sleep 1
            print_success "已停止进程"
            return 0
            ;;
        2)
            return 2
            ;;
        *)
            exit 0
            ;;
    esac
}

# 安装 Caddy
install_caddy() {
    if command -v caddy &> /dev/null; then
        return 0
    fi
    
    print_info "正在安装 Caddy..."
    
    apt-get update -qq > /dev/null 2>&1
    apt-get install -y -qq debian-keyring debian-archive-keyring apt-transport-https curl > /dev/null 2>&1
    
    curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' 2>/dev/null | \
        gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg
    
    curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' 2>/dev/null | \
        tee /etc/apt/sources.list.d/caddy-stable.list > /dev/null
    
    apt-get update -qq > /dev/null 2>&1
    apt-get install -y -qq caddy > /dev/null 2>&1
    
    # 创建日志目录并设置正确权限
    mkdir -p /var/log/caddy
    chown -R caddy:caddy /var/log/caddy
    chmod 755 /var/log/caddy
    
    systemctl enable caddy 2>/dev/null
    
    print_success "Caddy 安装完成"
}

# 检查 DNS
check_dns() {
    local domain=$1
    local server_ip=$(curl -s --max-time 3 ifconfig.me 2>/dev/null)
    local domain_ip=$(dig +short $domain 2>/dev/null | tail -n1)
    
    if [ -z "$domain_ip" ] || [ "$domain_ip" != "$server_ip" ]; then
        print_warning "DNS 未正确解析或解析到其他IP"
        echo "服务器 IP: $server_ip"
        echo "域名解析: ${domain_ip:-未解析}"
        echo -n "继续? (y/n): "
        read cont
        [[ $cont != "y" && $cont != "Y" ]] && return 1
    fi
    return 0
}

# 获取站点列表
get_sites() {
    if [ ! -f /etc/caddy/Caddyfile ]; then
        return
    fi
    grep -E "^[a-zA-Z0-9].*\{$" /etc/caddy/Caddyfile 2>/dev/null | sed 's/ {$//' || true
}

# 检查域名是否存在
domain_exists() {
    local domain=$1
    get_sites | grep -q "^$domain$" && return 0 || return 1
}

# 生成站点配置
gen_config() {
    local domain=$1
    local port=$2
    cat <<EOF

$domain {
    reverse_proxy localhost:$port
    log {
        output file /var/log/caddy/${domain}.log
    }
    header {
        Strict-Transport-Security "max-age=31536000"
        X-Content-Type-Options "nosniff"
        X-Frame-Options "DENY"
    }
}
EOF
}

# 添加或更新站点
add_or_update_site() {
    local domain=$1
    local port=$2
    local http_port=${3:-80}
    local https_port=${4:-443}
    
    # 确保日志目录存在且权限正确
    mkdir -p /var/log/caddy
    chown -R caddy:caddy /var/log/caddy 2>/dev/null || chown -R www-data:www-data /var/log/caddy 2>/dev/null
    chmod 755 /var/log/caddy
    
    # 初始化配置文件
    if [ ! -f /etc/caddy/Caddyfile ]; then
        if [ "$http_port" == "80" ] && [ "$https_port" == "443" ]; then
            echo "# Caddy 配置文件" > /etc/caddy/Caddyfile
        else
            cat > /etc/caddy/Caddyfile <<EOF
# Caddy 配置文件
{
    http_port $http_port
    https_port $https_port
}
EOF
        fi
    fi
    
    # 如果域名已存在，删除旧配置
    if domain_exists "$domain"; then
        print_info "更新现有站点: $domain"
        sed -i "/^$domain {$/,/^}$/d" /etc/caddy/Caddyfile
    else
        print_info "添加新站点: $domain"
    fi
    
    # 添加新配置
    gen_config "$domain" "$port" >> /etc/caddy/Caddyfile
    
    # 验证并重载
    if caddy validate --config /etc/caddy/Caddyfile > /dev/null 2>&1; then
        systemctl reload caddy 2>/dev/null || systemctl restart caddy
        sleep 1
        
        if systemctl is-active --quiet caddy; then
            if [ "$https_port" == "443" ]; then
                print_success "配置完成: https://$domain"
            else
                print_success "配置完成: https://$domain:$https_port"
            fi
            print_info "SSL 证书将在首次访问时自动申请"
            return 0
        else
            print_error "Caddy 启动失败"
            journalctl -u caddy -n 10 --no-pager
            return 1
        fi
    else
        print_error "配置验证失败"
        caddy validate --config /etc/caddy/Caddyfile 2>&1 | tail -5
        return 1
    fi
}

# 删除站点
remove_site() {
    local domain=$1
    
    if ! domain_exists "$domain"; then
        print_error "站点不存在: $domain"
        return 1
    fi
    
    sed -i "/^$domain {$/,/^}$/d" /etc/caddy/Caddyfile
    systemctl reload caddy 2>/dev/null
    print_success "已删除站点: $domain"
}

# 列出站点
list_sites() {
    echo ""
    print_title "===== 已配置的站点 ====="
    echo ""
    
    local sites=$(get_sites)
    
    if [ -z "$sites" ]; then
        echo "暂无配置"
    else
        echo "$sites" | nl -w2 -s'. '
    fi
    echo ""
}

# 主菜单
show_menu() {
    clear
    echo ""
    print_title "╔════════════════════════════════════════╗"
    print_title "║       Caddy SSL 快速配置工具           ║"
    print_title "╚════════════════════════════════════════╝"
    
    list_sites
    
    echo "1) 添加/更新站点"
    echo "2) 删除站点"
    echo "3) 查看配置文件"
    echo "4) 查看运行状态"
    echo "5) 重启 Caddy"
    echo "0) 退出"
    echo ""
}

# 快速配置模式
quick_add() {
    echo ""
    print_title "===== 快速添加站点 ====="
    echo ""
    
    echo -n "域名: "
    read domain
    [ -z "$domain" ] && { print_error "域名不能为空"; return 1; }
    
    echo -n "端口: "
    read port
    [ -z "$port" ] && { print_error "端口不能为空"; return 1; }
    [[ ! "$port" =~ ^[0-9]+$ ]] && { print_error "端口必须是数字"; return 1; }
    
    check_dns "$domain" || return 1
    
    add_or_update_site "$domain" "$port" "$HTTP_PORT" "$HTTPS_PORT"
}

# 主程序
main() {
    check_root
    
    # 安装 Caddy（如果未安装）
    if ! command -v caddy &> /dev/null; then
        print_info "检测到 Caddy 未安装"
        install_caddy
    fi
    
    # 检查端口冲突（仅首次或无配置文件时）
    if [ ! -f /etc/caddy/Caddyfile ] || [ ! -s /etc/caddy/Caddyfile ]; then
        HTTP_PORT=80
        HTTPS_PORT=443
        
        if ! check_port 80; then
            handle_port_conflict 80 "HTTP"
            [ $? -eq 2 ] && { HTTP_PORT=81; HTTPS_PORT=8443; }
        fi
        
        if [ "$HTTP_PORT" == "80" ] && ! check_port 443; then
            handle_port_conflict 443 "HTTPS"
            [ $? -eq 2 ] && { HTTP_PORT=81; HTTPS_PORT=8443; }
        fi
        
        [ "$HTTP_PORT" != "80" ] && print_warning "使用备用端口: $HTTP_PORT/$HTTPS_PORT"
    else
        # 从现有配置读取端口
        HTTP_PORT=$(grep "http_port" /etc/caddy/Caddyfile 2>/dev/null | grep -oP '\d+' || echo "80")
        HTTPS_PORT=$(grep "https_port" /etc/caddy/Caddyfile 2>/dev/null | grep -oP '\d+' || echo "443")
    fi
    
    # 交互式菜单
    while true; do
        show_menu
        echo -n "请选择 [0-5]: "
        read choice
        echo ""
        
        case $choice in
            1)
                quick_add
                echo ""
                echo -n "按回车继续..."
                read dummy
                ;;
            2)
                list_sites
                echo -n "输入要删除的域名: "
                read domain
                [ ! -z "$domain" ] && remove_site "$domain"
                echo ""
                echo -n "按回车继续..."
                read dummy
                ;;
            3)
                echo ""
                cat /etc/caddy/Caddyfile
                echo ""
                echo -n "按回车继续..."
                read dummy
                ;;
            4)
                echo ""
                systemctl status caddy --no-pager -l
                echo ""
                echo -n "按回车继续..."
                read dummy
                ;;
            5)
                systemctl restart caddy
                print_success "Caddy 已重启"
                sleep 2
                ;;
            0)
                print_info "退出"
                exit 0
                ;;
            *)
                print_error "无效选择"
                sleep 1
                ;;
        esac
    done
}

# 安装脚本到用户目录
install_script() {
    if [ ! -f "$INSTALL_PATH" ] || [ "$0" != "$INSTALL_PATH" ]; then
        cp "$0" "$INSTALL_PATH" 2>/dev/null || curl -sSL https://raw.githubusercontent.com/chf5762-sudo/bash/main/Caddy_ssl -o "$INSTALL_PATH"
        chmod +x "$INSTALL_PATH"
        
        # 创建软链接到 /usr/local/bin
        ln -sf "$INSTALL_PATH" /usr/local/bin/caddy-ssl 2>/dev/null
        
        print_success "脚本已安装到: $INSTALL_PATH"
        print_info "可以直接运行: caddy-ssl"
    fi
}

# 启动
install_script
main
