#!/bin/bash

# Caddy SSL 自动配置脚本
# 用于快速配置域名反向代理和自动 HTTPS

set -e

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# 打印带颜色的消息
print_info() {
    echo -e "${BLUE}[信息]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[成功]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[警告]${NC} $1"
}

print_error() {
    echo -e "${RED}[错误]${NC} $1"
}

# 检查是否为 root 用户
check_root() {
    if [ "$EUID" -ne 0 ]; then 
        print_error "请使用 root 权限运行此脚本"
        echo "使用: sudo bash $0"
        exit 1
    fi
}

# 检测并处理端口冲突
check_port_conflict() {
    local port=$1
    local service=$(lsof -i :$port -t 2>/dev/null || true)
    
    if [ ! -z "$service" ]; then
        local process_name=$(ps -p $service -o comm= 2>/dev/null || echo "未知进程")
        print_warning "端口 $port 已被占用 (进程: $process_name, PID: $service)"
        
        echo -n "是否停止占用端口的服务? (y/n): "
        read -r stop_service
        
        if [[ $stop_service == "y" || $stop_service == "Y" ]]; then
            print_info "正在停止进程 $service..."
            kill -9 $service 2>/dev/null || true
            sleep 2
            print_success "进程已停止"
            return 0
        else
            print_error "无法继续，端口被占用"
            return 1
        fi
    fi
    return 0
}

# 卸载 Nginx
remove_nginx() {
    if systemctl is-active --quiet nginx 2>/dev/null || [ -d "/etc/nginx" ]; then
        print_warning "检测到 Nginx 已安装"
        echo -n "是否卸载 Nginx? (y/n): "
        read -r remove_nginx_choice
        
        if [[ $remove_nginx_choice == "y" || $remove_nginx_choice == "Y" ]]; then
            print_info "正在卸载 Nginx..."
            systemctl stop nginx 2>/dev/null || true
            systemctl disable nginx 2>/dev/null || true
            apt-get remove --purge nginx nginx-common nginx-full -y 2>/dev/null || true
            rm -rf /etc/nginx
            rm -rf /var/log/nginx
            rm -rf /www/server/nginx
            print_success "Nginx 已卸载"
        fi
    fi
}

# 安装 Caddy
install_caddy() {
    if command -v caddy &> /dev/null; then
        print_success "Caddy 已安装，版本: $(caddy version)"
        echo -n "是否重新安装? (y/n): "
        read -r reinstall
        
        if [[ $reinstall != "y" && $reinstall != "Y" ]]; then
            return 0
        fi
    fi
    
    print_info "正在安装 Caddy..."
    
    # 检查并处理 80/443 端口冲突
    check_port_conflict 80 || exit 1
    check_port_conflict 443 || exit 1
    
    # 安装依赖
    apt-get update
    apt-get install -y debian-keyring debian-archive-keyring apt-transport-https curl
    
    # 添加 Caddy 仓库
    curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg
    curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | tee /etc/apt/sources.list.d/caddy-stable.list
    
    # 安装 Caddy
    apt-get update
    apt-get install -y caddy
    
    print_success "Caddy 安装完成"
}

# 验证域名 DNS 解析
check_dns() {
    local domain=$1
    print_info "正在检查域名 DNS 解析..."
    
    local server_ip=$(curl -s ifconfig.me || curl -s icanhazip.com || curl -s ipinfo.io/ip)
    local domain_ip=$(dig +short $domain | tail -n1)
    
    if [ -z "$domain_ip" ]; then
        print_warning "无法解析域名 $domain"
        print_warning "请确保域名 DNS 已正确配置指向: $server_ip"
        echo -n "是否继续? (y/n): "
        read -r continue_anyway
        if [[ $continue_anyway != "y" && $continue_anyway != "Y" ]]; then
            exit 1
        fi
    elif [ "$domain_ip" != "$server_ip" ]; then
        print_warning "域名解析到: $domain_ip"
        print_warning "但服务器 IP 是: $server_ip"
        print_warning "HTTPS 证书申请可能失败"
        echo -n "是否继续? (y/n): "
        read -r continue_anyway
        if [[ $continue_anyway != "y" && $continue_anyway != "Y" ]]; then
            exit 1
        fi
    else
        print_success "DNS 解析正确: $domain -> $server_ip"
    fi
}

# 配置 Caddy
configure_caddy() {
    local domain=$1
    local port=$2
    
    print_info "正在配置 Caddy..."
    
    # 备份现有配置
    if [ -f /etc/caddy/Caddyfile ]; then
        cp /etc/caddy/Caddyfile /etc/caddy/Caddyfile.backup.$(date +%Y%m%d_%H%M%S)
    fi
    
    # 创建新配置
    cat > /etc/caddy/Caddyfile <<EOF
# Caddy 配置文件
# 自动生成时间: $(date)

$domain {
    reverse_proxy localhost:$port
    
    # 日志
    log {
        output file /var/log/caddy/$domain.log
    }
    
    # 可选：添加安全头
    header {
        Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
        X-Content-Type-Options "nosniff"
        X-Frame-Options "DENY"
        Referrer-Policy "no-referrer-when-downgrade"
    }
}
EOF

    print_success "配置文件已创建: /etc/caddy/Caddyfile"
}

# 测试并启动 Caddy
start_caddy() {
    print_info "正在验证配置..."
    
    if caddy validate --config /etc/caddy/Caddyfile; then
        print_success "配置验证通过"
    else
        print_error "配置验证失败"
        exit 1
    fi
    
    print_info "正在启动 Caddy..."
    systemctl enable caddy
    systemctl restart caddy
    
    sleep 3
    
    if systemctl is-active --quiet caddy; then
        print_success "Caddy 启动成功"
    else
        print_error "Caddy 启动失败"
        print_info "查看日志: journalctl -u caddy -n 50"
        exit 1
    fi
}

# 显示结果
show_result() {
    local domain=$1
    local port=$2
    
    echo ""
    echo "================================================"
    print_success "配置完成！"
    echo "================================================"
    echo ""
    echo "域名: https://$domain"
    echo "后端端口: $port"
    echo ""
    echo "常用命令:"
    echo "  查看状态: sudo systemctl status caddy"
    echo "  查看日志: sudo journalctl -u caddy -f"
    echo "  重启服务: sudo systemctl restart caddy"
    echo "  编辑配置: sudo nano /etc/caddy/Caddyfile"
    echo "  重载配置: sudo systemctl reload caddy"
    echo ""
    echo "配置文件位置: /etc/caddy/Caddyfile"
    echo "日志位置: /var/log/caddy/$domain.log"
    echo ""
    print_info "SSL 证书会在首次访问时自动申请，请稍等片刻"
    print_info "你可以访问 https://$domain 来测试"
    echo ""
}

# 添加更多站点
add_more_sites() {
    echo ""
    echo -n "是否继续添加其他域名? (y/n): "
    read -r add_more
    
    if [[ $add_more == "y" || $add_more == "Y" ]]; then
        return 0
    else
        return 1
    fi
}

# 主函数
main() {
    clear
    echo "================================================"
    echo "    Caddy SSL 自动配置脚本"
    echo "    自动 HTTPS + 反向代理"
    echo "================================================"
    echo ""
    
    check_root
    remove_nginx
    install_caddy
    
    # 创建日志目录
    mkdir -p /var/log/caddy
    
    while true; do
        echo ""
        echo "请输入配置信息:"
        echo ""
        
        # 输入域名
        read -p "域名 (例如: vps1.chf5762.cloudns.org): " domain
        if [ -z "$domain" ]; then
            print_error "域名不能为空"
            continue
        fi
        
        # 输入端口
        read -p "后端端口 (例如: 4444): " port
        if [ -z "$port" ]; then
            print_error "端口不能为空"
            continue
        fi
        
        # 验证端口是否为数字
        if ! [[ "$port" =~ ^[0-9]+$ ]]; then
            print_error "端口必须是数字"
            continue
        fi
        
        # 检查 DNS
        check_dns "$domain"
        
        # 配置 Caddy
        configure_caddy "$domain" "$port"
        
        # 启动服务
        start_caddy
        
        # 显示结果
        show_result "$domain" "$port"
        
        # 询问是否添加更多站点
        if ! add_more_sites; then
            break
        fi
        
        # 如果要添加更多站点，追加到配置文件
        echo "" >> /etc/caddy/Caddyfile
    done
    
    echo ""
    print_success "所有配置完成！祝使用愉快 🎉"
    echo ""
}

# 运行主函数
main
