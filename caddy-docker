#!/bin/bash

# Caddy Docker 一键配置脚本
# 使用 Docker 运行 Caddy，避免系统冲突

set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

# 配置目录
CADDY_DIR="$HOME/caddy"
CADDYFILE="$CADDY_DIR/Caddyfile"
DATA_DIR="$CADDY_DIR/data"
CONFIG_DIR="$CADDY_DIR/config"

print_info() { echo -e "${BLUE}[信息]${NC} $1"; }
print_success() { echo -e "${GREEN}[成功]${NC} $1"; }
print_warning() { echo -e "${YELLOW}[警告]${NC} $1"; }
print_error() { echo -e "${RED}[错误]${NC} $1"; }
print_title() { echo -e "${CYAN}$1${NC}"; }

# 检查 Docker
check_docker() {
    if ! command -v docker &> /dev/null; then
        print_warning "Docker 未安装"
        echo -n "是否安装 Docker? (y/n): "
        read install
        if [[ $install == "y" || $install == "Y" ]]; then
            install_docker
        else
            print_error "需要 Docker 才能继续"
            exit 1
        fi
    fi
}

# 安装 Docker
install_docker() {
    print_info "正在安装 Docker..."
    curl -fsSL https://get.docker.com -o get-docker.sh
    sh get-docker.sh
    rm get-docker.sh
    systemctl start docker
    systemctl enable docker
    print_success "Docker 安装完成"
}

# 初始化目录
init_dirs() {
    mkdir -p "$CADDY_DIR" "$DATA_DIR" "$CONFIG_DIR"
    
    if [ ! -f "$CADDYFILE" ]; then
        cat > "$CADDYFILE" <<EOF
# Caddy 配置文件
# Docker 版本

{
    email admin@example.com
}
EOF
        print_success "配置文件已创建: $CADDYFILE"
    fi
}

# 停止并删除旧容器
stop_caddy() {
    if docker ps -a --format '{{.Names}}' | grep -q "^caddy$"; then
        print_info "停止旧容器..."
        docker stop caddy 2>/dev/null || true
        docker rm caddy 2>/dev/null || true
    fi
}

# 启动 Caddy 容器
start_caddy() {
    print_info "启动 Caddy 容器..."
    
    docker run -d \
        --name caddy \
        --restart unless-stopped \
        -p 80:80 \
        -p 443:443 \
        -p 443:443/udp \
        -v "$CADDYFILE:/etc/caddy/Caddyfile" \
        -v "$DATA_DIR:/data" \
        -v "$CONFIG_DIR:/config" \
        caddy:latest
    
    sleep 2
    
    if docker ps --format '{{.Names}}' | grep -q "^caddy$"; then
        print_success "Caddy 已启动"
    else
        print_error "Caddy 启动失败"
        docker logs caddy 2>&1 | tail -10
        return 1
    fi
}

# 重启 Caddy
restart_caddy() {
    stop_caddy
    start_caddy
}

# 验证配置
validate_config() {
    docker exec caddy caddy validate --config /etc/caddy/Caddyfile > /dev/null 2>&1
}

# 重载配置
reload_caddy() {
    print_info "重新加载配置..."
    
    if validate_config; then
        docker exec caddy caddy reload --config /etc/caddy/Caddyfile 2>/dev/null
        print_success "配置已重载"
        return 0
    else
        print_error "配置验证失败"
        docker exec caddy caddy validate --config /etc/caddy/Caddyfile 2>&1 | tail -5
        return 1
    fi
}

# 获取站点列表
get_sites() {
    if [ ! -f "$CADDYFILE" ]; then
        return
    fi
    grep -E "^[a-zA-Z0-9].*\{$" "$CADDYFILE" 2>/dev/null | sed 's/ {$//' || true
}

# 检查域名是否存在
domain_exists() {
    local domain=$1
    get_sites | grep -q "^$domain$" && return 0 || return 1
}

# 生成站点配置
gen_config() {
    local domain=$1
    local port=$2
    cat <<EOF

$domain {
    reverse_proxy localhost:$port
}
EOF
}

# 添加站点
add_site() {
    local domain=$1
    local port=$2
    
    # 检查容器网络，如果是本地端口需要用 host.docker.internal
    if [[ $port =~ ^[0-9]+$ ]]; then
        local target="host.docker.internal:$port"
    else
        local target="$port"
    fi
    
    if domain_exists "$domain"; then
        print_info "更新站点: $domain"
        sed -i "/^$domain {$/,/^}$/d" "$CADDYFILE"
    else
        print_info "添加站点: $domain"
    fi
    
    cat >> "$CADDYFILE" <<EOF

$domain {
    reverse_proxy $target
}
EOF
    
    if reload_caddy; then
        print_success "配置完成: https://$domain"
        print_info "SSL 证书将自动申请"
        return 0
    else
        return 1
    fi
}

# 删除站点
remove_site() {
    local domain=$1
    
    if ! domain_exists "$domain"; then
        print_error "站点不存在: $domain"
        return 1
    fi
    
    sed -i "/^$domain {$/,/^}$/d" "$CADDYFILE"
    
    if reload_caddy; then
        print_success "已删除: $domain"
    else
        return 1
    fi
}

# 列出站点
list_sites() {
    echo ""
    print_title "===== 已配置的站点 ====="
    echo ""
    
    local sites=$(get_sites)
    if [ -z "$sites" ]; then
        echo "暂无配置"
    else
        echo "$sites" | nl -w2 -s'. '
    fi
    echo ""
}

# 显示菜单
show_menu() {
    clear
    echo ""
    print_title "╔════════════════════════════════════════╗"
    print_title "║     Caddy Docker 快速配置工具          ║"
    print_title "╚════════════════════════════════════════╝"
    
    list_sites
    
    echo "1) 添加/更新站点"
    echo "2) 删除站点"
    echo "3) 查看配置文件"
    echo "4) 查看容器状态"
    echo "5) 查看日志"
    echo "6) 重启容器"
    echo "7) 完全卸载"
    echo "0) 退出"
    echo ""
}

# 快速添加
quick_add() {
    echo ""
    print_title "===== 快速添加站点 ====="
    echo ""
    
    echo -n "域名: "
    read domain
    [ -z "$domain" ] && { print_error "域名不能为空"; return 1; }
    
    echo -n "后端端口 (宿主机端口): "
    read port
    [ -z "$port" ] && { print_error "端口不能为空"; return 1; }
    [[ ! "$port" =~ ^[0-9]+$ ]] && { print_error "端口必须是数字"; return 1; }
    
    add_site "$domain" "$port"
}

# 完全卸载
uninstall() {
    echo ""
    print_warning "这将删除所有配置和数据！"
    echo -n "确认卸载? (yes/no): "
    read confirm
    
    if [ "$confirm" == "yes" ]; then
        print_info "正在卸载..."
        docker stop caddy 2>/dev/null || true
        docker rm caddy 2>/dev/null || true
        rm -rf "$CADDY_DIR"
        print_success "已完全卸载"
        exit 0
    else
        print_info "已取消"
    fi
}

# 主程序
main() {
    # 检查 Docker
    check_docker
    
    # 初始化
    init_dirs
    
    # 检查容器状态
    if ! docker ps --format '{{.Names}}' | grep -q "^caddy$"; then
        print_info "Caddy 容器未运行"
        start_caddy
    fi
    
    # 主菜单
    while true; do
        show_menu
        echo -n "请选择 [0-7]: "
        read choice
        echo ""
        
        case $choice in
            1)
                quick_add
                echo ""
                echo -n "按回车继续..."
                read dummy
                ;;
            2)
                list_sites
                echo -n "输入要删除的域名: "
                read domain
                [ ! -z "$domain" ] && remove_site "$domain"
                echo ""
                echo -n "按回车继续..."
                read dummy
                ;;
            3)
                echo ""
                cat "$CADDYFILE"
                echo ""
                echo -n "按回车继续..."
                read dummy
                ;;
            4)
                echo ""
                docker ps -a --filter name=caddy
                echo ""
                echo -n "按回车继续..."
                read dummy
                ;;
            5)
                echo ""
                echo "最近 20 行日志:"
                docker logs --tail 20 caddy
                echo ""
                echo -n "按回车继续..."
                read dummy
                ;;
            6)
                restart_caddy
                sleep 2
                ;;
            7)
                uninstall
                ;;
            0)
                print_info "退出"
                exit 0
                ;;
            *)
                print_error "无效选择"
                sleep 1
                ;;
        esac
    done
}

main
