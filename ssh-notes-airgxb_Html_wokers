export default {
  async fetch(request, env) {
    const url = new URL(request.url);
    
    // API 路由：保存笔记
    if (url.pathname === '/api/notes/save' && request.method === 'POST') {
      try {
        const { content } = await request.json();
        await env.NOTES.put('user_notes', content);
        return new Response(JSON.stringify({ success: true }), {
          headers: { 'Content-Type': 'application/json' }
        });
      } catch (e) {
        return new Response(JSON.stringify({ success: false, error: e.message }), {
          status: 500,
          headers: { 'Content-Type': 'application/json' }
        });
      }
    }
    
    // API 路由：读取笔记
    if (url.pathname === '/api/notes/load' && request.method === 'GET') {
      try {
        const content = await env.NOTES.get('user_notes') || '';
        return new Response(JSON.stringify({ success: true, content }), {
          headers: { 'Content-Type': 'application/json' }
        });
      } catch (e) {
        return new Response(JSON.stringify({ success: false, error: e.message }), {
          status: 500,
          headers: { 'Content-Type': 'application/json' }
        });
      }
    }
    
    // 返回 HTML 页面
    return new Response(HTML_CONTENT, {
      headers: { 'Content-Type': 'text/html;charset=UTF-8' }
    });
  }
};

const HTML_CONTENT = `<!doctype html>
<html lang="zh-CN">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Argosbx一键SSH命令生成器</title>
  <style>
    :root {
      --bg:#0b1020;
      --card:#121831;
      --ink:#e9edf7;
      --sub:#b7c1d9;
      --line:#263255;
      --acc:#4f7cff;
      --ok:#22c55e;
      --warn:#f59e0b;
      --err:#ef4444;
      --input-bg:#0d1430;
      --button-bg-dark:#1a2346;
      --button-bg-light:#121a39;
      --body-bg: linear-gradient(180deg, var(--bg) 0%, #0e1530 100%);
    }
    .light-mode {
      --bg:#ffffff;
      --card:#ffffff;
      --ink:#1a202c;
      --sub:#4a5568;
      --line:#e2e8f0;
      --acc:#4f7cff;
      --ok:#22c55e;
      --warn:#f59e0b;
      --err:#ef4444;
      --input-bg:#ffffff;
      --button-bg-dark:#e2e8f0;
      --button-bg-light:#f0f4f9;
      --body-bg: var(--bg);
    }
    * {
      box-sizing: border-box;
    }
    body {
      margin: 0;
      background: var(--body-bg);
      color: var(--ink);
      font: 16px/1.4 system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, "Helvetica Neue", Arial;
      transition: background-color 0.3s, color 0.3s;
    }
    .wrap {
      max-width: 1400px;
      margin: 32px auto;
      padding: 0 16px;
    }
    header {
      position: relative;
      margin-bottom: 16px;
      display: flex;
      justify-content: center;
      align-items: center;
      flex-direction: column;
    }
    header h1 {
      font-size: 36px;
      margin-bottom: 6px;
      text-align: center;
    }
    header p {
      margin: 0;
      font-size: 14px;
      color: var(--sub);
      line-height: 1.6;
      max-width: 400px;
      margin-left: auto;
      margin-right: auto;
      text-align: left;
    }
    a {
      color: var(--acc);
      text-decoration: none;
    }
    a:hover {
      text-decoration: underline;
    }
    .grid {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 16px;
    }
    @media (max-width: 980px) {
      .grid {
        grid-template-columns: 1fr;
      }
    }
    .ssh-connection {
      grid-column: 1 / 3;
      grid-row: 1;
    }
    .reverse-fill {
      grid-column: 1 / 3;
      grid-row: 2;
    }
    .notes-card {
      grid-column: 1 / 3;
      grid-row: 3;
    }
    .protocol-port {
      grid-column: 1;
      grid-row: 4 / 6;
    }
    .outbound-warp {
      grid-column: 1;
      grid-row: 6;
    }
    .argo-tunnel {
      grid-column: 1;
      grid-row: 7;
    }
    .shortcut-commands-card {
      grid-column: 2;
      grid-row: 4 / 8;
    }
    .out {
      grid-column: 1 / 3;
      grid-row: 8;
    }
    @media (max-width: 980px) {
      .ssh-connection, .reverse-fill, .protocol-port, .outbound-warp, 
      .argo-tunnel, .notes-card, .shortcut-commands-card, .out {
        grid-column: 1;
      }
    }
    .card {
      background: rgba(255, 255, 255, .04);
      backdrop-filter: blur(6px);
      border: 1px solid var(--line);
      border-radius: 16px;
      padding: 16px;
      transition: background-color 0.3s, border-color 0.3s;
    }
    .light-mode .card {
      background: var(--card);
      border-color: var(--line);
    }
    .card h2 {
      margin: 0 0 12px;
      font-size: 20px;
      color: var(--ink);
    }
    .card h3 {
      margin: 0 0 12px;
      font-size: 16px;
      color: var(--ink);
    }
    .protocol-item {
      display: flex;
      align-items: center;
      gap: 12px;
      margin-bottom: 8px;
    }
    .protocol-item label {
      white-space: nowrap;
      display: flex;
      align-items: center;
      gap: 10px;
    }
    .protocol-item input[type="text"] {
      flex-grow: 1;
      min-width: 100px;
      padding: 10px 12px;
      border: 1px solid var(--line);
      border-radius: 10px;
      background: var(--input-bg);
      color: var(--ink);
      outline: none;
      transition: background-color 0.3s, border-color 0.3s, color 0.3s;
    }
    .protocol-grid {
      display: grid;
      grid-template-columns: auto 1fr;
      gap: 8px 12px;
      align-items: center;
    }
    .protocol-grid .protocol-item {
      margin: 0;
    }

    .row:not(.protocol-port .row) {
      display: grid;
      grid-template-columns: 200px 1fr;
      gap: 12px;
      align-items: center;
      margin: 8px 0;
    }
    @media (max-width: 600px) {
      .row:not(.protocol-port .row) {
        grid-template-columns: 1fr;
      }
    }
    label {
      display: flex;
      align-items: center;
      gap: 10px;
      cursor: pointer;
    }
    input[type="text"], input[type="password"], input[type="number"], select {
      width: 100%;
      padding: 10px 12px;
      border: 1px solid var(--line);
      border-radius: 10px;
      background: var(--input-bg);
      color: var(--ink);
      outline: none;
      transition: background-color 0.3s, border-color 0.3s, color 0.3s;
    }
    input[disabled] {
      opacity: .5;
    }
    .switch {
      position: relative;
      width: 48px;
      height: 28px;
      background: #263255;
      border-radius: 99px;
      cursor: pointer;
      transition: .2s;
    }
    .light-mode .switch {
      background: var(--sub);
    }
    .switch::after {
      content: "";
      position: absolute;
      inset: 3px auto 3px 3px;
      width: 22px;
      border-radius: 50%;
      background: white;
      transition: .2s;
    }
    .switch.on {
      background: var(--acc);
    }
    .switch.on::after {
      left: auto;
      right: 3px;
    }
    .pill {
      display: inline-block;
      font-size: 12px;
      padding: 2px 8px;
      border: 1px solid var(--line);
      border-radius: 999px;
      color: var(--sub);
      margin-left: 6px;
      transition: border-color 0.3s, color 0.3s;
    }
    .actions {
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
      margin-top: 10px;
    }
    button {
      cursor: pointer;
      border: 1px solid var(--line);
      background: linear-gradient(180deg, var(--button-bg-dark), var(--button-bg-light));
      color: var(--ink);
      padding: 10px 14px;
      border-radius: 12px;
      transition: background 0.3s, color 0.3s, border-color 0.3s;
    }
    button:hover {
      opacity: 0.9;
      transform: translateY(-1px);
    }
    button:active {
      transform: translateY(0);
    }
    button.primary {
      background: linear-gradient(180deg, #4f7cff, #385fdf);
      border-color: #476de2;
      color: #fff;
    }
    button.success {
      background: linear-gradient(180deg, #22c55e, #16a34a);
      border-color: #15803d;
      color: #fff;
    }
    button.ghost {
      background: transparent;
    }
    .out {
      position: relative;
    }
    textarea {
      width: 100%;
      min-height: 130px;
      background: #0a1128;
      color: #dbeafe;
      border: 1px dashed #3752a6;
      border-radius: 12px;
      padding: 12px;
      white-space: pre;
      resize: vertical;
      transition: background-color 0.3s, border-color 0.3s, color 0.3s;
      font-family: 'Courier New', monospace;
    }
    .light-mode textarea {
      background: #f0f4f9;
      color: #1a202c;
      border-color: #929faf;
    }
    .tabs {
      display: flex;
      gap: 8px;
      margin: 0 0 12px;
    }
    .tab {
      padding: 8px 10px;
      border-radius: 10px;
      border: 1px solid var(--line);
      color: var(--sub);
      cursor: pointer;
      transition: background-color 0.3s, border-color 0.3s, color 0.3s;
    }
    .tab.active {
      border-color: #5a73c9;
      color: var(--ink);
      background: rgba(79, 124, 255, .15);
    }
    .shortcut-commands-content {
      display: flex;
      flex-wrap: wrap;
      align-items: center;
      gap: 10px;
      margin-top: 10px;
    }
    .shortcut-commands-content p {
      margin: 0;
      white-space: nowrap;
    }
    .shortcut-commands-content .command-button {
      background: var(--button-bg-dark);
      color: var(--ink);
      padding: 8px 12px;
      border: 1px solid var(--line);
      border-radius: 8px;
      cursor: pointer;
      font-size: 14px;
      transition: background-color 0.3s, border-color 0.3s, color 0.3s;
    }
    .shortcut-commands-content .command-button:hover {
      background: var(--line);
    }
    .input-with-button {
      display: flex;
      gap: 8px;
      align-items: center;
    }
    .input-with-button input[type="text"],
    .input-with-button input[type="password"] {
      flex: 1;
    }
    .input-with-button button {
      padding: 8px 12px;
      font-size: 14px;
      white-space: nowrap;
      border-radius: 8px;
    }
    .protocol-group {
      margin-bottom: 16px;
    }
    .protocol-group.separator {
      border-bottom: 1px dotted var(--line);
      padding-bottom: 16px;
    }
    .theme-switch {
      position: absolute;
      top: 0;
      right: 0;
      z-index: 10;
      padding: 10px;
    }
    .theme-switch-icon {
      width: 24px;
      height: 24px;
      cursor: pointer;
      color: var(--ink);
      transition: color 0.3s;
    }
    .theme-switch-checkbox {
      display: none;
    }
    .theme-switch-label {
      cursor: pointer;
    }
    .command-type-row {
      display: flex;
      align-items: center;
      gap: 10px;
      margin-bottom: 12px;
    }
    .command-type-row label {
      white-space: nowrap;
      margin: 0;
    }
    .reverse-fill textarea {
      min-height: 80px;
      margin-bottom: 10px;
    }
    .script-url-group {
      margin-top: 16px;
      padding-top: 16px;
      border-top: 1px dotted var(--line);
    }
    .script-url-item {
      display: flex;
      align-items: center;
      gap: 10px;
      margin-bottom: 8px;
    }
    .script-url-item input[type="radio"] {
      width: auto;
    }
    .script-url-item input[type="text"] {
      flex: 1;
    }
    .status-message {
      font-size: 13px;
      padding: 8px 12px;
      border-radius: 8px;
      margin-top: 8px;
    }
    .status-message.success {
      background: rgba(34, 197, 94, 0.1);
      border: 1px solid var(--ok);
      color: var(--ok);
    }
    .status-message.error {
      background: rgba(239, 68, 68, 0.1);
      border: 1px solid var(--err);
      color: var(--err);
    }
    .status-message.info {
      background: rgba(79, 124, 255, 0.1);
      border: 1px solid var(--acc);
      color: var(--acc);
    }
    .ssh-grid {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      gap: 12px;
      margin-bottom: 12px;
    }
    @media (max-width: 768px) {
      .ssh-grid {
        grid-template-columns: 1fr;
      }
    }
    .ssh-output {
      background: rgba(79, 124, 255, 0.05);
      border: 1px solid var(--acc);
      border-radius: 10px;
      padding: 12px;
      margin-top: 12px;
      font-family: 'Courier New', monospace;
      color: var(--acc);
      word-break: break-all;
    }
    .light-mode .ssh-output {
      background: rgba(79, 124, 255, 0.08);
    }
    .password-toggle {
      cursor: pointer;
      padding: 8px;
      color: var(--sub);
      user-select: none;
    }
    .password-toggle:hover {
      color: var(--ink);
    }
    
    /* 记事本样式 */
    .notes-card {
      display: flex;
      flex-direction: column;
      height: fit-content;
      min-height: 400px;
    }
    .notes-tabs {
      display: flex;
      gap: 8px;
      margin-bottom: 12px;
    }
    .notes-tab {
      flex: 1;
      padding: 8px 12px;
      border-radius: 10px;
      border: 1px solid var(--line);
      color: var(--sub);
      cursor: pointer;
      text-align: center;
      transition: all 0.3s;
      font-size: 14px;
    }
    .notes-tab.active {
      border-color: var(--acc);
      color: var(--ink);
      background: rgba(79, 124, 255, .15);
    }
    .notes-content {
      flex: 1;
      display: flex;
      flex-direction: column;
    }
    .notes-editor, .notes-preview {
      display: none;
      flex-direction: column;
      flex: 1;
    }
    .notes-editor.active, .notes-preview.active {
      display: flex;
    }
    #notesTextarea {
      flex: 1;
      min-height: 250px;
      font-family: 'Courier New', Monaco, monospace;
      font-size: 14px;
      line-height: 1.6;
      white-space: pre-wrap;
    }
    .notes-preview-content {
      flex: 1;
      padding: 16px;
      background: var(--input-bg);
      border: 1px solid var(--line);
      border-radius: 10px;
      overflow-y: auto;
      min-height: 250px;
    }
    .notes-preview-content h1 { font-size: 2em; margin: 0.67em 0; }
    .notes-preview-content h2 { font-size: 1.5em; margin: 0.75em 0; }
    .notes-preview-content h3 { font-size: 1.17em; margin: 0.83em 0; }
    .notes-preview-content h4 { font-size: 1em; margin: 1.12em 0; }
    .notes-preview-content h5 { font-size: 0.83em; margin: 1.5em 0; }
    .notes-preview-content h6 { font-size: 0.75em; margin: 1.67em 0; }
    .notes-preview-content p { margin: 1em 0; line-height: 1.6; }
    .notes-preview-content ul, .notes-preview-content ol { margin: 1em 0; padding-left: 2em; }
    .notes-preview-content li { margin: 0.5em 0; }
    .notes-preview-content code {
      background: rgba(79, 124, 255, 0.1);
      padding: 2px 6px;
      border-radius: 4px;
      font-family: 'Courier New', monospace;
      font-size: 0.9em;
    }
    .notes-preview-content pre {
      background: rgba(0, 0, 0, 0.3);
      padding: 12px;
      border-radius: 8px;
      overflow-x: auto;
      margin: 1em 0;
    }
    .notes-preview-content pre code {
      background: none;
      padding: 0;
    }
    .notes-preview-content blockquote {
      border-left: 4px solid var(--acc);
      padding-left: 16px;
      margin: 1em 0;
      color: var(--sub);
    }
    .notes-preview-content a {
      color: var(--acc);
      text-decoration: none;
    }
    .notes-preview-content a:hover {
      text-decoration: underline;
    }
    .notes-preview-content table {
      border-collapse: collapse;
      width: 100%;
      margin: 1em 0;
    }
    .notes-preview-content th, .notes-preview-content td {
      border: 1px solid var(--line);
      padding: 8px 12px;
      text-align: left;
    }
    .notes-preview-content th {
      background: rgba(79, 124, 255, 0.1);
      font-weight: bold;
    }
    .notes-actions {
      display: flex;
      flex-wrap: wrap;
      gap: 8px;
      margin-top: 12px;
    }
    .notes-actions button {
      flex: 1;
      min-width: 100px;
      font-size: 13px;
      padding: 8px 12px;
    }
    .sync-indicator {
      display: inline-block;
      width: 8px;
      height: 8px;
      border-radius: 50%;
      background: var(--ok);
      margin-left: 8px;
      animation: pulse 2s infinite;
    }
    .sync-indicator.syncing {
      background: var(--warn);
    }
    .sync-indicator.error {
      background: var(--err);
    }
    @keyframes pulse {
      0%, 100% { opacity: 1; }
      50% { opacity: 0.5; }
    }
  </style>
</head>
<body>
  <div class="wrap">
    <header>
      <div class="theme-switch">
        <input type="checkbox" id="theme-switch-checkbox" class="theme-switch-checkbox">
        <label for="theme-switch-checkbox" class="theme-switch-label">
          <svg class="theme-switch-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
          </svg>
        </label>
      </div>
      <h1>Argosbx小钢炮💣一键SSH命令生成器 V25.10.18</h1>
      <p>
        甬哥Github项目：
        <a href="https://github.com/yonggekkk" target="_blank">github.com/yonggekkk</a><br>
        甬哥Blogger博客：
        <a href="https://ygkkk.blogspot.com" target="_blank">ygkkk.blogspot.com</a><br>
        甬哥YouTube频道：
        <a href="https://www.youtube.com/@ygkkk" target="_blank">www.youtube.com/@ygkkk</a><br>
      </p>
    </header>

    <div class="grid">
      <!-- SSH连接信息 -->
      <section class="card ssh-connection">
        <h2>🔌 SSH连接信息（Windows OpenSSH）</h2>
        <p style="color: var(--sub); font-size: 14px; margin-bottom: 12px;">填写服务器SSH连接信息，生成标准SSH命令</p>
        <div class="ssh-grid">
          <div>
            <label style="font-size: 14px; margin-bottom: 4px; display: block;">用户名</label>
            <input id="sshUser" type="text" placeholder="默认 root" value="root"/>
          </div>
          <div>
            <label style="font-size: 14px; margin-bottom: 4px; display: block;">主机IP/域名 *</label>
            <input id="sshHost" type="text" placeholder="例如: 192.168.1.1"/>
          </div>
          <div>
            <label style="font-size: 14px; margin-bottom: 4px; display: block;">密码（仅用于记录）</label>
            <div class="input-with-button">
              <input id="sshPassword" type="password" placeholder="例如: @Cyn5762579" value="@Cyn5762579"/>
              <span class="password-toggle" id="togglePassword" title="显示/隐藏密码">👁️</span>
            </div>
          </div>
        </div>
        <div class="actions">
          <button id="generateSshBtn" class="primary">生成SSH命令</button>
          <button id="copySshBtn">复制SSH命令</button>
          <button id="copyPasswordBtn">复制密码</button>
        </div>
        <div id="sshOutput"></div>
        <div id="sshStatus"></div>
        <p style="color: var(--sub); font-size: 13px; margin-top: 12px; margin-bottom: 0;">
          💡 使用说明：1) 生成SSH命令 → 2) 在PowerShell/CMD中执行 → 3) 手动输入密码（可点击"复制密码"按钮） → 4) 连接成功后执行下方脚本
        </p>
      </section>

      <!-- 反向填充区域 -->
      <section class="card reverse-fill">
        <h2>🔄 反向填充配置</h2>
        <p style="color: var(--sub); font-size: 14px; margin-bottom: 10px;">粘贴完整的命令字符串，自动解析并填充到下方表单</p>
        <textarea id="reverseInput" placeholder="例如：sopt=&quot;50009&quot; vmpt=&quot;50010&quot; vlpt=&quot;50001&quot; ... bash <(curl -Ls ...)"></textarea>
        <div class="actions">
          <button id="parseBtn" class="primary">解析并填充</button>
          <button id="loadDefaultBtn" class="success">加载默认配置</button>
        </div>
        <div id="parseStatus"></div>
      </section>

      <!-- 云端记事本 -->
      <section class="card notes-card">
        <h2>📝 云端记事本 <span class="sync-indicator" id="syncIndicator"></span></h2>
        <p style="color: var(--sub); font-size: 13px; margin-bottom: 12px;">
          支持 Markdown 格式，一键转换邮件为 Markdown，云端自动保存
        </p>
        <div class="notes-tabs">
          <div class="notes-tab active" data-tab="edit">✍️ 编辑</div>
          <div class="notes-tab" data-tab="preview">👁️ 预览</div>
        </div>
        <div class="notes-content">
          <div class="notes-editor active">
            <textarea id="notesTextarea" placeholder="在此输入 Markdown 内容...&#10;&#10;# 标题&#10;## 子标题&#10;- 列表项 1&#10;- 列表项 2&#10;&#10;**粗体** *斜体* \`代码\`&#10;&#10;或直接粘贴邮件内容，点击"邮件转Markdown"按钮"></textarea>
          </div>
          <div class="notes-preview">
            <div class="notes-preview-content" id="notesPreview">
              <p style="color: var(--sub); text-align: center; padding: 20px;">预览内容将显示在这里...</p>
            </div>
          </div>
        </div>
        <div class="notes-actions">
          <button id="saveNotesBtn" class="success">💾 保存到云端</button>
          <button id="emailToMdBtn" class="primary">📧 邮件转Markdown</button>
          <button id="copyMdBtn">📋 复制Markdown</button>
          <button id="copyPreviewBtn">📄 复制预览</button>
          <button id="clearNotesBtn" class="ghost">🗑️ 清空</button>
        </div>
        <div id="notesStatus"></div>
      </section>

      <section class="card protocol-port">
        <h2>必选内核协议端口：</h2>
        <div class="protocol-group separator">
          <h3>Xray可选协议：</h3>
          <div class="protocol-grid">
            <label><input type="checkbox" data-proto="vlpt"> Vless-Tcp-Reality-V <span class="pill">vlpt</span></label><input type="text" placeholder="留空则随机端口" data-port="vlpt">
            <label><input type="checkbox" data-proto="xhpt"> Vless-Xhttp-Reality-V <span class="pill">xhpt</span></label><input type="text" placeholder="留空则随机端口" data-port="xhpt">
            <label><input type="checkbox" data-proto="vxpt"> Vless-Xhttp-V <span class="pill">vxpt</span></label><input type="text" placeholder="留空则随机端口" data-port="vxpt">
          </div>
        </div>
		<div class="protocol-group separator">
          <h3>Singbox可选协议：</h3>
          <div class="protocol-grid">
            <label><input type="checkbox" data-proto="hypt"> Hysteria2 <span class="pill">hypt</span></label><input type="text" placeholder="留空则随机端口" data-port="hypt">
            <label><input type="checkbox" data-proto="tupt"> Tuic <span class="pill">tupt</span></label><input type="text" placeholder="留空则随机端口" data-port="tupt">
            <label><input type="checkbox" data-proto="anpt"> AnyTLS <span class="pill">anpt</span></label><input type="text" placeholder="留空则随机端口" data-port="anpt">
            <label><input type="checkbox" data-proto="arpt"> Any-Reality <span class="pill">arpt</span></label><input type="text" placeholder="留空则随机端口" data-port="arpt">
            <label><input type="checkbox" data-proto="sspt"> Shadowsocks-2022 <span class="pill">sspt</span></label><input type="text" placeholder="留空则随机端口" data-port="sspt">
          </div>
        </div>
        <div class="protocol-group separator">
          <h3>Xray/Singbox自动分配协议：</h3>
          <div class="protocol-grid">
            <label><input type="checkbox" data-proto="sopt"> Socks5 <span class="pill">sopt</span></label><input type="text" placeholder="留空则随机端口" data-port="sopt">
            <label><input type="checkbox" data-proto="vmpt"> Vmess-ws <span class="pill">vmpt</span></label><input type="text" placeholder="留空则随机端口（Argo固定隧道需填写端口）" data-port="vmpt">
          </div>
        </div>
      </section>

      <section class="card outbound-warp">
        <h2>相关配置参数： </h2>
        <div class="row">
          <label>UUID 密码 <span class="pill">uuid</span></label>
          <div class="input-with-button">
            <input id="uuid" type="text" placeholder="留空则随机生成uuid密码"/>
            <button id="generateUuidBtn" type="button" class="primary">生成 UUID</button>
          </div>
        </div>
        <div class="row"><label>Reality 域名 <span class="pill">reym</span></label><input id="reym" type="text" placeholder="留空则默认apple.com"/></div>
        <div class="row"><label>CF解析IP的域名<span class="pill">cdnym</span></label><input id="cdnym" type="text" placeholder="仅Vmess-ws或Vless-Xhttp-V套CDN时可用" disabled/></div>
        <div class="row"><label>套WARP-IP出站 <span class="pill">warp</span></label>
          <select id="warp">
            <option value="">默认 服务器本地IP出站</option>
            <option value="s">1、Singbox套WARP IPv4+IPv6、Xray本地IP</option>
            <option value="s4">2、Singbox套WARP IPv4、Xray本地IP</option>
            <option value="s6">3、Singbox套WARP IPv6、Xray本地IP</option>
            <option value="x">4、Singbox本地IP、Xray套WARP IPv4+IPv6</option>
            <option value="x4">5、Singbox本地IP、Xray套WARP IPv4</option>
            <option value="x6">6、Singbox本地IP、Xray套WARP IPv6</option>
            <option value="s4x4">7、Singbox+Xray同时套WARP IPv4</option>
            <option value="s4x6">8、Singbox套WARP IPv4、Xray套WARP IPv6</option>
            <option value="s6x4">9、Singbox套WARP IPv6、Xray套WARP IPv4</option>
            <option value="s6x6">10、Singbox+Xray同时套WARP IPv6</option>
            <option value="sx4">11、Singbox套WARP IPv4+IPv6、Xray套WARP IPv4</option>
            <option value="sx6">12、Singbox套WARP IPv4+IPv6、Xray套WARP IPv6</option>
            <option value="s4x">13、Singbox套WARP IPv4、Xray套WARP IPv4+IPv6</option>
            <option value="s6x">14、Singbox套WARP IPv6、Xray套WARP IPv4+IPv6</option>
            <option value="sx">15、Singbox+Xray同时套WARP IPv4+IPv6</option>
          </select>
        </div>
        
        <div class="row"><label>IPv4/IPv6 配置导出 <span class="pill">ippz</span></label>
          <select id="ippz">
            <option value="">默认 自动</option>
            <option value="4">导出 IPv4</option>
            <option value="6">导出 IPv6</option>
          </select>
        </div>
        <div class="row"><label>导出节点名称前缀 <span class="pill">name</span></label><input id="name" type="text" placeholder="留空则默认协议名前缀"/></div>
        
        <!-- 脚本地址管理 -->
        <div class="script-url-group">
          <h3>脚本地址配置：</h3>
          <div class="script-url-item">
            <input type="radio" name="scriptUrl" value="primary" id="primaryUrl" checked>
            <label for="primaryUrl" style="white-space: nowrap; margin: 0;">主地址</label>
            <input type="text" id="primaryUrlInput" placeholder="主脚本地址">
          </div>
          <div class="script-url-item">
            <input type="radio" name="scriptUrl" value="backup" id="backupUrl">
            <label for="backupUrl" style="white-space: nowrap; margin: 0;">备用地址</label>
            <input type="text" id="backupUrlInput" placeholder="备用脚本地址">
          </div>
        </div>
      </section>

      <section class="card argo-tunnel">
        <h2>Argo临时/固定隧道：</h2>
        <div class="row">
          <label>启用Argo <span class="pill">argo</span></label>
          <div id="argoBtn" class="switch" role="switch" aria-checked="false"></div>
        </div>
        <div class="row"><label>固定隧道CF域名 <span class="pill">agn</span></label><input id="agn" type="text" placeholder="解析在CF的域名，留空则临时隧道" disabled></div>
        <div class="row"><label>固定隧道Token <span class="pill">agk</span></label><input id="agk" type="text" placeholder="ey开头的秘钥，留空则临时隧道" disabled></div>
      </section>

      <section class="card shortcut-commands-card">
        <h2>如已安装脚本，可用以下四个的快捷方式：</h2>
        <div class="shortcut-commands-content">
          <button class="command-button" data-command="list">节点显示的命令：list</button>
          <button class="command-button" data-command="del">卸载脚本的命令：del</button>
          <button class="command-button" data-command="res">重启脚本的命令：res</button>
          <button class="command-button" data-command="rep">更换、添加、删除变量的命令（注:变量设置完成后再点击）：rep</button>
        </div>
      </section>

      <section class="card out">
        <div class="tabs">
          <h2>进入服务器的SSH界面，复制下方生成的一键脚本命令，回车一次搞定</h2>
        </div>
        <div class="command-type-row">
            <label>命令类型选择：</label>
            <label style="margin-bottom: 0;"><input type="radio" name="commandType" value="curl" checked> curl</label>
            <label style="margin-bottom: 0;"><input type="radio" name="commandType" value="wget"> wget</label>
        </div>
        <textarea id="output" spellcheck="false"></textarea>
        <div class="actions">
          <button id="reset">重置</button>
          <button id="copy">复制</button>
        </div>
        <p style="margin-top: 10px;">相关操作及视频教程说明，请参考Argosbx小钢炮脚本项目💣：<a href="https://github.com/yonggekkk/argosbx" target="_blank">github.com/yonggekkk/argosbx</a></p>
      </section>
    </div>
  </div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/marked/11.1.1/marked.min.js"></script>
<script>
// 使用立即执行函数和 DOMContentLoaded 确保 DOM 完全加载
document.addEventListener('DOMContentLoaded', function() {
  // 默认脚本地址
  const DEFAULT_PRIMARY_URL = 'https://raw.githubusercontent.com/yonggekkk/argosbx/main/argosbx.sh';
  const DEFAULT_BACKUP_URL = '';
  
  // 默认配置 - 修改：移除 warp 默认值，实现本地出站
  const DEFAULT_CONFIG = {
    sopt: "50009",
    vmpt: "50010",
    vlpt: "50001",
    xhpt: "50002",
    vxpt: "50003",
    arpt: "50007",
    anpt: "50006",
    hypt: "50004",
    tupt: "50005",
    sspt: "50008",
    uuid: "57628066-f4a3-47cf-85dc-560d92d4b856",
    ippz: "4",
    argo: "y"
  };
  
  // 协议键名
  const protoKeys = ['sopt','vmpt','vlpt','xhpt','vxpt','arpt','anpt','hypt','tupt','sspt'];
  // 可选参数ID
  const optIds = ['warp','ippz','uuid','reym','cdnym','name'];

  // DOM元素引用
  const argoSwitch = document.getElementById('argoBtn');
  const agn = document.getElementById('agn');
  const agk = document.getElementById('agk');
  const vmessWsCheckbox = document.querySelector('[data-proto="vmpt"]');
  const vlessXhttpCheckbox = document.querySelector('[data-proto="vxpt"]');
  const cdnymInput = document.getElementById('cdnym');
  const output = document.getElementById('output');
  const allInputs = document.querySelectorAll('input, select');
  const checkboxes = document.querySelectorAll('input[type="checkbox"]');
  const textInputs = document.querySelectorAll('input[type="text"]');
  const ippzSelect = document.getElementById('ippz');
  const generateUuidBtn = document.getElementById('generateUuidBtn');
  const uuidInput = document.getElementById('uuid');
  const themeSwitchCheckbox = document.getElementById('theme-switch-checkbox');
  const commandTypeRadios = document.querySelectorAll('input[name="commandType"]');
  const reverseInput = document.getElementById('reverseInput');
  const parseBtn = document.getElementById('parseBtn');
  const loadDefaultBtn = document.getElementById('loadDefaultBtn');
  const parseStatus = document.getElementById('parseStatus');
  const primaryUrlInput = document.getElementById('primaryUrlInput');
  const backupUrlInput = document.getElementById('backupUrlInput');
  const primaryUrlRadio = document.getElementById('primaryUrl');
  const backupUrlRadio = document.getElementById('backupUrl');
  
  // SSH相关元素
  const sshUser = document.getElementById('sshUser');
  const sshHost = document.getElementById('sshHost');
  const sshPassword = document.getElementById('sshPassword');
  const generateSshBtn = document.getElementById('generateSshBtn');
  const copySshBtn = document.getElementById('copySshBtn');
  const copyPasswordBtn = document.getElementById('copyPasswordBtn');
  const togglePassword = document.getElementById('togglePassword');
  const sshOutput = document.getElementById('sshOutput');
  const sshStatus = document.getElementById('sshStatus');

  // 记事本相关元素
  const notesTextarea = document.getElementById('notesTextarea');
  const notesPreview = document.getElementById('notesPreview');
  const notesTabs = document.querySelectorAll('.notes-tab');
  const notesEditor = document.querySelector('.notes-editor');
  const notesPreviewDiv = document.querySelector('.notes-preview');
  const saveNotesBtn = document.getElementById('saveNotesBtn');
  const emailToMdBtn = document.getElementById('emailToMdBtn');
  const copyMdBtn = document.getElementById('copyMdBtn');
  const copyPreviewBtn = document.getElementById('copyPreviewBtn');
  const clearNotesBtn = document.getElementById('clearNotesBtn');
  const notesStatus = document.getElementById('notesStatus');
  const syncIndicator = document.getElementById('syncIndicator');

  // 初始化主题
  function initTheme() {
    const isLightMode = localStorage.getItem('theme') === 'light';
    if (isLightMode) {
      document.body.classList.add('light-mode');
      themeSwitchCheckbox.checked = true;
    }
  }

  // 切换主题
  function toggleTheme() {
    document.body.classList.toggle('light-mode');
    const isLightMode = document.body.classList.contains('light-mode');
    localStorage.setItem('theme', isLightMode ? 'light' : 'dark');
  }

  // 为主题切换复选框添加事件监听器
  if (themeSwitchCheckbox) {
    themeSwitchCheckbox.addEventListener('change', toggleTheme);
  }

  // === SSH功能 ===
  
  // 初始化SSH信息
  function initSshInfo() {
    const savedUser = localStorage.getItem('sshUser');
    const savedHost = localStorage.getItem('sshHost');
    const savedPassword = localStorage.getItem('sshPassword');
    
    if (savedUser) sshUser.value = savedUser;
    if (savedHost) sshHost.value = savedHost;
    if (savedPassword) sshPassword.value = savedPassword;
  }

  // 保存SSH信息
  function saveSshInfo() {
    localStorage.setItem('sshUser', sshUser.value.trim());
    localStorage.setItem('sshHost', sshHost.value.trim());
    localStorage.setItem('sshPassword', sshPassword.value.trim());
  }

  // SSH输入框监听
  if (sshUser && sshHost && sshPassword) {
    [sshUser, sshHost, sshPassword].forEach(el => {
      el.addEventListener('input', saveSshInfo);
    });
  }

  // 切换密码显示/隐藏
  if (togglePassword) {
    togglePassword.addEventListener('click', function() {
      if (sshPassword.type === 'password') {
        sshPassword.type = 'text';
        togglePassword.textContent = '🙈';
      } else {
        sshPassword.type = 'password';
        togglePassword.textContent = '👁️';
      }
    });
  }

  // 生成SSH命令
  function generateSshCommand() {
    const user = sshUser.value.trim() || 'root';
    const host = sshHost.value.trim();
    
    if (!host) {
      showSshStatus('⚠ 请输入主机IP或域名', 'error');
      return;
    }
    
    const sshCommand = \`ssh \${user}@\${host}\`;
    sshOutput.innerHTML = \`<div class="ssh-output">\${sshCommand}</div>\`;
    showSshStatus('✓ SSH命令已生成，请复制到PowerShell或CMD中执行', 'success');
    
    return sshCommand;
  }

  // 生成SSH命令按钮
  if (generateSshBtn) {
    generateSshBtn.addEventListener('click', generateSshCommand);
  }

  // 复制SSH命令
  if (copySshBtn) {
    copySshBtn.addEventListener('click', async function() {
      const command = generateSshCommand();
      if (!command) return;
      
      try {
        await navigator.clipboard.writeText(command);
        showSshStatus('✓ SSH命令已复制到剪贴板', 'success');
      } catch (e) {
        showSshStatus('✗ 复制失败，请手动复制', 'error');
      }
    });
  }

  // 复制密码
  if (copyPasswordBtn) {
    copyPasswordBtn.addEventListener('click', async function() {
      const password = sshPassword.value.trim();
      if (!password) {
        showSshStatus('⚠ 密码为空', 'error');
        return;
      }
      
      try {
        await navigator.clipboard.writeText(password);
        showSshStatus('✓ 密码已复制到剪贴板', 'success');
      } catch (e) {
        showSshStatus('✗ 复制失败', 'error');
      }
    });
  }

  // 显示SSH状态消息
  function showSshStatus(message, type) {
    if (!sshStatus) return;
    type = type || 'success';
    sshStatus.innerHTML = \`<div class="status-message \${type}">\${message}</div>\`;
    setTimeout(function() {
      sshStatus.innerHTML = '';
    }, 3000);
  }

  // === 记事本功能 ===
  
  // 初始化记事本
  async function initNotes() {
    try {
      const response = await fetch('/api/notes/load');
      const data = await response.json();
      if (data.success && data.content) {
        notesTextarea.value = data.content;
        updatePreview();
        setSyncStatus('synced');
      }
    } catch (e) {
      console.error('加载笔记失败:', e);
      setSyncStatus('error');
    }
  }

  // 设置同步状态
  function setSyncStatus(status) {
    if (!syncIndicator) return;
    syncIndicator.className = 'sync-indicator';
    if (status === 'syncing') {
      syncIndicator.classList.add('syncing');
    } else if (status === 'error') {
      syncIndicator.classList.add('error');
    }
  }

  // 保存笔记到云端
  async function saveNotes() {
    const content = notesTextarea.value;
    setSyncStatus('syncing');
    
    try {
      const response = await fetch('/api/notes/save', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ content: content })
      });
      
      const data = await response.json();
      if (data.success) {
        showNotesStatus('✓ 已保存到云端', 'success');
        setSyncStatus('synced');
      } else {
        throw new Error(data.error || '保存失败');
      }
    } catch (e) {
      showNotesStatus('✗ 保存失败: ' + e.message, 'error');
      setSyncStatus('error');
    }
  }

  // 更新预览
  function updatePreview() {
    if (!notesTextarea || !notesPreview) return;
    const markdown = notesTextarea.value;
    if (markdown.trim()) {
      notesPreview.innerHTML = marked.parse(markdown);
    } else {
      notesPreview.innerHTML = '<p style="color: var(--sub); text-align: center; padding: 20px;">预览内容将显示在这里...</p>';
    }
  }

  // 邮件转Markdown
  function emailToMarkdown() {
    const text = notesTextarea.value.trim();
    if (!text) {
      showNotesStatus('⚠ 请先粘贴邮件内容', 'error');
      return;
    }

    let markdown = text;
    
    // 识别并转换标题（连续大写或结尾有冒号的行）
    markdown = markdown.replace(/^([A-Z][A-Z\\s]+):?\\s*$/gm, '## $1');
    markdown = markdown.replace(/^([^\\n]+):\\s*$/gm, '### $1');
    
    // 转换编号列表
    markdown = markdown.replace(/^\\s*(\\d+)[\\.\\)]\\s+(.+)$/gm, '$1. $2');
    
    // 转换无序列表（-、*、• 开头）
    markdown = markdown.replace(/^\\s*[•\\-\\*]\\s+(.+)$/gm, '- $1');
    
    // 识别并转换引用块（> 或 | 开头）
    markdown = markdown.replace(/^[>\\|]\\s*(.+)$/gm, '> $1');
    
    // 转换邮件分隔线
    markdown = markdown.replace(/^[\\-_]{3,}$/gm, '---');
    
    // 识别URL并转换为链接
    markdown = markdown.replace(/(?<!\\])\\((https?:\\/\\/[^\\s\\)]+)\\)/g, '($1)');
    markdown = markdown.replace(/(?<!\\()(https?:\\/\\/[^\\s]+)/g, '[$1]($1)');
    
    // 强调重要文字（全大写的词）
    markdown = markdown.replace(/\\b([A-Z]{2,})\\b/g, '**$1**');
    
    // 转换邮件签名
    markdown = markdown.replace(/^--\\s*$/gm, '\\n---\\n');
    
    // 清理多余空行（保留最多2个连续换行）
    markdown = markdown.replace(/\\n{3,}/g, '\\n\\n');
    
    notesTextarea.value = markdown;
    updatePreview();
    showNotesStatus('✓ 已转换为 Markdown 格式', 'success');
  }

  // 显示笔记状态
  function showNotesStatus(message, type) {
    if (!notesStatus) return;
    type = type || 'success';
    notesStatus.innerHTML = \`<div class="status-message \${type}">\${message}</div>\`;
    setTimeout(function() {
      notesStatus.innerHTML = '';
    }, 3000);
  }

  // 标签切换
  if (notesTabs) {
    notesTabs.forEach(function(tab) {
      tab.addEventListener('click', function() {
        const tabType = tab.dataset.tab;
        
        notesTabs.forEach(function(t) { t.classList.remove('active'); });
        tab.classList.add('active');
        
        if (tabType === 'edit') {
          if (notesEditor) notesEditor.classList.add('active');
          if (notesPreviewDiv) notesPreviewDiv.classList.remove('active');
        } else {
          if (notesEditor) notesEditor.classList.remove('active');
          if (notesPreviewDiv) notesPreviewDiv.classList.add('active');
          updatePreview();
        }
      });
    });
  }

  // 实时更新预览（输入时）
  let updateTimer;
  if (notesTextarea) {
    notesTextarea.addEventListener('input', function() {
      clearTimeout(updateTimer);
      updateTimer = setTimeout(updatePreview, 500);
    });
  }

  // 按钮事件
  if (saveNotesBtn) {
    saveNotesBtn.addEventListener('click', saveNotes);
  }
  
  if (emailToMdBtn) {
    emailToMdBtn.addEventListener('click', emailToMarkdown);
  }
  
  if (copyMdBtn) {
    copyMdBtn.addEventListener('click', async function() {
      try {
        await navigator.clipboard.writeText(notesTextarea.value);
        showNotesStatus('✓ Markdown 已复制', 'success');
      } catch (e) {
        showNotesStatus('✗ 复制失败', 'error');
      }
    });
  }
  
  if (copyPreviewBtn) {
    copyPreviewBtn.addEventListener('click', async function() {
      try {
        const text = notesPreview.innerText;
        await navigator.clipboard.writeText(text);
        showNotesStatus('✓ 预览内容已复制', 'success');
      } catch (e) {
        showNotesStatus('✗ 复制失败', 'error');
      }
    });
  }
  
  if (clearNotesBtn) {
    clearNotesBtn.addEventListener('click', function() {
      if (confirm('确定要清空记事本内容吗？')) {
        notesTextarea.value = '';
        updatePreview();
        showNotesStatus('✓ 已清空', 'info');
      }
    });
  }

  // === 脚本地址功能 ===
  
  // 初始化脚本地址
  function initScriptUrls() {
    const savedPrimary = localStorage.getItem('primaryScriptUrl');
    const savedBackup = localStorage.getItem('backupScriptUrl');
    
    if (primaryUrlInput) primaryUrlInput.value = savedPrimary || DEFAULT_PRIMARY_URL;
    if (backupUrlInput) backupUrlInput.value = savedBackup || DEFAULT_BACKUP_URL;
  }

  // 保存脚本地址
  function saveScriptUrls() {
    if (primaryUrlInput) {
      localStorage.setItem('primaryScriptUrl', primaryUrlInput.value.trim());
    }
    if (backupUrlInput) {
      localStorage.setItem('backupScriptUrl', backupUrlInput.value.trim());
    }
  }

  // 获取当前选择的脚本地址
  function getCurrentScriptUrl() {
    if (primaryUrlRadio && primaryUrlRadio.checked) {
      return (primaryUrlInput ? primaryUrlInput.value.trim() : '') || DEFAULT_PRIMARY_URL;
    } else {
      return (backupUrlInput ? backupUrlInput.value.trim() : '') || (primaryUrlInput ? primaryUrlInput.value.trim() : '') || DEFAULT_PRIMARY_URL;
    }
  }

  // 脚本地址输入框监听
  if (primaryUrlInput) {
    primaryUrlInput.addEventListener('input', function() {
      saveScriptUrls();
      render();
    });
  }
  
  if (backupUrlInput) {
    backupUrlInput.addEventListener('input', function() {
      saveScriptUrls();
      render();
    });
  }

  // 脚本地址选择监听
  document.querySelectorAll('input[name="scriptUrl"]').forEach(function(radio) {
    radio.addEventListener('change', render);
  });

  // === 反向填充功能 ===
  
  // 显示状态消息
  function showStatus(message, type) {
    if (!parseStatus) return;
    type = type || 'success';
    parseStatus.innerHTML = \`<div class="status-message \${type}">\${message}</div>\`;
    setTimeout(function() {
      parseStatus.innerHTML = '';
    }, 3000);
  }

  // 解析命令字符串
  function parseCommand(commandStr) {
    const result = {};
    
    // 移除bash命令部分
    const cleanStr = commandStr.replace(/bash\\s*<\\([^)]+\\)[^\\s]*/g, '').trim();
    
    // 正则匹配 key="value" 或 key=value 格式
    const regex = /(\\w+)=(?:"([^"]*)"|(\\S+))/g;
    let match;
    
    while ((match = regex.exec(cleanStr)) !== null) {
      const key = match[1];
      const value = match[2] !== undefined ? match[2] : match[3];
      result[key] = value;
    }
    
    return result;
  }

  // 加载默认配置
  function loadDefaultConfig() {
    applyConfig(DEFAULT_CONFIG);
    showStatus('✓ 默认配置已加载', 'success');
  }

  // 应用配置到表单
  function applyConfig(config) {
    // 先重置表单
    resetForm(false);
    
    // 填充协议端口
    protoKeys.forEach(function(key) {
      if (config[key] !== undefined) {
        const checkbox = document.querySelector(\`[data-proto="\${key}"]\`);
        const portInput = document.querySelector(\`[data-port="\${key}"]\`);
        if (checkbox && portInput) {
          checkbox.checked = true;
          portInput.value = config[key];
        }
      }
    });
    
    // 填充其他参数
    if (config.uuid && uuidInput) uuidInput.value = config.uuid;
    if (config.reym) {
      const reymEl = document.getElementById('reym');
      if (reymEl) reymEl.value = config.reym;
    }
    if (config.cdnym && cdnymInput) cdnymInput.value = config.cdnym;
    if (config.name) {
      const nameEl = document.getElementById('name');
      if (nameEl) nameEl.value = config.name;
    }
    if (config.warp) {
      const warpEl = document.getElementById('warp');
      if (warpEl) warpEl.value = config.warp;
    }
    if (config.ippz && ippzSelect) ippzSelect.value = config.ippz;
    
    // 处理Argo
    if (config.argo === 'y') {
      updateArgoState(true);
      if (config.agn && agn) agn.value = config.agn;
      if (config.agk && agk) agk.value = config.agk;
    }
    
    // 更新状态
	updateCdnymState();
    render();
  }

  // 解析并填充按钮事件
  if (parseBtn) {
    parseBtn.addEventListener('click', function() {
      const commandStr = reverseInput.value.trim();
      
      if (!commandStr) {
        showStatus('⚠ 请先粘贴命令字符串', 'error');
        return;
      }
      
      try {
        const parsed = parseCommand(commandStr);
        
        if (Object.keys(parsed).length === 0) {
          showStatus('⚠ 未能解析到有效参数', 'error');
          return;
        }
        
        applyConfig(parsed);
        showStatus(\`✓ 成功解析并填充 \${Object.keys(parsed).length} 个参数\`, 'success');
      } catch (error) {
        showStatus('✗ 解析失败，请检查命令格式', 'error');
        console.error('Parse error:', error);
      }
    });
  }

  // 加载默认配置按钮事件
  if (loadDefaultBtn) {
    loadDefaultBtn.addEventListener('click', loadDefaultConfig);
  }

  // === 表单逻辑 ===

  /**
   * 更新Argo隧道开关的状态和相关输入框的禁用状态。
   */
  function updateArgoState(isEnabled) {
    if (!argoSwitch) return;
    argoSwitch.classList.toggle('on', isEnabled);
    argoSwitch.setAttribute('aria-checked', isEnabled ? 'true' : 'false');
    if (agn) agn.disabled = !isEnabled;
    if (agk) agk.disabled = !isEnabled;
    render();
  }

  /**
   * 重置所有表单输入到默认状态。
   */
  function resetForm(preserveIppz) {
    if (preserveIppz === undefined) preserveIppz = false;
    
    checkboxes.forEach(function(cb) {
      cb.checked = false;
    });
    textInputs.forEach(function(inp) {
      inp.value = '';
    });
    const warpEl = document.getElementById('warp');
    if (warpEl) warpEl.value = '';
    if (!preserveIppz && ippzSelect) {
      ippzSelect.value = '';
    }
    if (uuidInput) uuidInput.value = '';
    const reymEl = document.getElementById('reym');
    if (reymEl) reymEl.value = '';
    const nameEl = document.getElementById('name');
    if (nameEl) nameEl.value = '';
    updateArgoState(false);
    updateCdnymState();
  }

  /**
   * 根据Vmess-ws协议或VLESS-Xhttp协议的选择状态更新cdnym输入框的禁用状态。
   */
  function updateCdnymState() {
    if (!vmessWsCheckbox || !vlessXhttpCheckbox || !cdnymInput) return;
    const isAnyProtocolChecked = vmessWsCheckbox.checked || vlessXhttpCheckbox.checked;
    cdnymInput.disabled = !isAnyProtocolChecked;
    
    if (!isAnyProtocolChecked) {
      cdnymInput.value = '';
    }
    render();
  }

  // === 事件监听器 ===

  // Argo开关事件监听
  if (argoSwitch) {
    argoSwitch.addEventListener('click', function() {
      const on = !argoSwitch.classList.contains('on');
      if (on && vmessWsCheckbox) {
        vmessWsCheckbox.checked = true;
      }
      updateArgoState(on);
      updateCdnymState();
    });
  }

  // Vmess-ws复选框事件监听
  if (vmessWsCheckbox) {
    vmessWsCheckbox.addEventListener('change', function() {
      if (!vmessWsCheckbox.checked) {
        updateArgoState(false);
      }
      updateCdnymState();
      render();
    });
  }
  
  // VLESS-Xhttp复选框事件监听
  if (vlessXhttpCheckbox) {
    vlessXhttpCheckbox.addEventListener('change', function() {
      updateCdnymState();
      render();
    });
  }

  // 端口输入框事件监听
  document.querySelectorAll('[data-port]').forEach(function(inp) {
    inp.addEventListener('input', function() {
      const key = inp.getAttribute('data-port');
      const ck = document.querySelector(\`[data-proto="\${key}"]\`);
      if (!ck) return;
      if (inp.value.trim() !== '' && !ck.checked) {
        ck.checked = true;
      }
      render();
    });
  });

  // 协议复选框事件监听
  document.querySelectorAll('[data-proto]').forEach(function(ck) {
    ck.addEventListener('change', function() {
      if (!ck.checked) {
        const key = ck.getAttribute('data-proto');
        const pt = document.querySelector(\`[data-port="\${key}"]\`);
        if (pt) {
          pt.value = '';
        }
      }

      if (ck.getAttribute('data-proto') === 'vmpt') {
        if (!ck.checked) {
          updateArgoState(false);
        }
      }
      if (ck.getAttribute('data-proto') === 'vmpt' || ck.getAttribute('data-proto') === 'vxpt') {
        updateCdnymState();
      }
      render();
    });
  });

  // UUID生成按钮事件监听
  if (generateUuidBtn && uuidInput) {
    generateUuidBtn.addEventListener('click', function() {
      uuidInput.value = crypto.randomUUID();
      render();
    });
  }

  // 命令类型单选框事件监听
  if (commandTypeRadios) {
    commandTypeRadios.forEach(function(radio) {
      radio.addEventListener('change', render);
    });
  }

  // === 核心功能函数 ===

  /**
   * 收集所有表单变量。
   */
  function collectVars(){
    const m = {};
    protoKeys.forEach(function(k) {
      const ck = document.querySelector(\`[data-proto="\${k}"]\`);
      const pt = document.querySelector(\`[data-port="\${k}"]\`);
      if (ck && ck.checked) {
        const v = (pt.value || '').trim();
        m[k] = v;
      }
    });
    optIds.forEach(function(id) {
      const el = document.getElementById(id);
      if (!el) return;
      const v = (el.value || '').trim();
      if (v !== '' && !el.disabled) {
        m[id] = v;
      }
    });
    if (argoSwitch && argoSwitch.classList.contains('on')) {
      m['argo'] = 'y';
      const _agn = agn ? (agn.value || '').trim() : '';
      const _agk = agk ? (agk.value || '').trim() : '';
      if (_agn) m['agn'] = _agn;
      if (_agk) m['agk'] = _agk;
    }
    return m;
  }

  /**
   * 将变量对象转换为bash命令字符串。
   */
  function toBashVars(m){
    const keys = Object.keys(m);
    const ordered = [];
    protoKeys.forEach(function(k) { 
      if (keys.includes(k)) ordered.push(k); 
    });
    ['warp', 'uuid', 'reym', 'cdnym', 'name', 'ippz'].forEach(function(k) { 
      if (keys.includes(k)) ordered.push(k); 
    });
    if (keys.includes('argo')) ordered.push('argo');
    ['agn', 'agk'].forEach(function(k) { 
      if (keys.includes(k)) ordered.push(k); 
    });
    keys.forEach(function(k) { 
      if (!ordered.includes(k)) ordered.push(k); 
    });

    return ordered.map(function(k) {
      const val = m[k];
      if (val === '') return \`\${k}=""\`;
      if (/[^\\w\\-\\.:/]/.test(val)) {
        return \`\${k}="\${val.replace(/"/g, '\\\\"')}"\`;
      }
      return \`\${k}="\${val}"\`;
    }).join(' ');
  }

  /**
   * 渲染并更新输出文本区域。
   */
  function render(){
    if (!output) return;
    const m = collectVars();
    const vars = toBashVars(m);
    const scriptUrl = getCurrentScriptUrl();
    const selectedCommandEl = document.querySelector('input[name="commandType"]:checked');
    const selectedCommand = selectedCommandEl ? selectedCommandEl.value : 'curl';
    
    let commandTemplate;
    if (selectedCommand === 'curl') {
      commandTemplate = \`bash <(curl -Ls \${scriptUrl})\`;
    } else {
      commandTemplate = \`bash <(wget -qO- \${scriptUrl})\`;
    }
    
    output.value = (vars ? vars + ' ' : '') + commandTemplate;
  }

  // 初始化
  initTheme();
  initScriptUrls();
  initSshInfo();
  initNotes();
  updateCdnymState();
  render();

  // 为所有输入元素添加事件监听器
  if (allInputs) {
    allInputs.forEach(function(el) {
      el.addEventListener('input', render);
      el.addEventListener('change', render);
    });
  }
  
  // 快捷命令按钮事件监听 - 修改：添加 rep 支持
  document.querySelectorAll('.command-button').forEach(function(btn) {
    btn.addEventListener('click', function() {
      const command = btn.getAttribute('data-command');
      const ippzValue = ippzSelect ? ippzSelect.value : '';
      const scriptUrl = getCurrentScriptUrl();
      const selectedCommandEl = document.querySelector('input[name="commandType"]:checked');
      const selectedCommand = selectedCommandEl ? selectedCommandEl.value : 'curl';
      
      let commandTemplate;
      if (selectedCommand === 'curl') {
        commandTemplate = \`bash <(curl -Ls \${scriptUrl})\`;
      } else {
        commandTemplate = \`bash <(wget -qO- \${scriptUrl})\`;
      }
      
      const shouldPreserveIppz = (command === 'list' && (ippzValue === '4' || ippzValue === '6'));

      if (command === 'rep') {
        // rep 命令：保留当前所有配置并添加 rep 参数
        const m = collectVars();
        const vars = toBashVars(m);
        output.value = (vars ? vars + ' ' : '') + commandTemplate + ' rep';
      } else {
        resetForm(shouldPreserveIppz);
        if (shouldPreserveIppz) {
          if (ippzSelect) ippzSelect.value = ippzValue;
          const m = collectVars();
          m['ippz'] = ippzValue;
          const vars = toBashVars(m);
          output.value = \`\${vars} \${commandTemplate} \${command}\`;
        } else {
          output.value = \`\${commandTemplate} \${command}\`;
        }
      }
    });
  });

  // 复制按钮事件监听
  const copyBtn = document.getElementById('copy');
  if (copyBtn) {
    copyBtn.addEventListener('click', async function() {
      const t = document.getElementById('output');
      if (!t) return;
      t.select(); 
      t.setSelectionRange(0, 99999);
      try { 
        await navigator.clipboard.writeText(t.value); 
        showToast('已复制到剪贴板'); 
      } catch (e) { 
        document.execCommand('copy'); 
        showToast('已复制'); 
      }
    });
  }

  // 重置按钮事件监听
  const resetBtn = document.getElementById('reset');
  if (resetBtn) {
    resetBtn.addEventListener('click', function() { 
      location.reload(); 
    });
  }

  /**
   * 显示一个短暂的提示消息。
   */
  function showToast(msg) {
    const d = document.createElement('div');
    d.textContent = msg; 
    d.style.position = 'fixed'; 
    d.style.left = '50%'; 
    d.style.top = '20px'; 
    d.style.transform = 'translateX(-50%)';
    d.style.padding = '10px 14px'; 
    d.style.background = 'rgba(0,0,0,.6)'; 
    d.style.color = '#fff'; 
    d.style.border = '1px solid #334155'; 
    d.style.borderRadius = '10px'; 
    d.style.zIndex = '9999';
    document.body.appendChild(d); 
    setTimeout(function() { 
      d.remove(); 
    }, 1400);
  }
});
</script>
</body>
</html>
`;
